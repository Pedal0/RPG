name: Python CI/CD Pipeline

on:
  push:
    branches: [ "dev" ]  # Déclenche l'action sur chaque push vers dev

permissions:
  contents: write  # Nécessaire pour faire des pushs et des reset

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      lint_status: ${{ steps.set-lint-status.outputs.status }}
      test_status: ${{ steps.set-test-status.outputs.status }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupère tout l’historique pour permettre l’accès aux commits précédents
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        id: lint
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Set lint status
        id: set-lint-status
        run: echo "::set-output name=status::${{ steps.lint.outcome == 'success' }}"

      - name: Test with pytest
        id: test
        run: pytest
        continue-on-error: true

      - name: Set test status
        id: set-test-status
        run: echo "::set-output name=status::${{ steps.test.outcome == 'success' }}"

  fast-forward-master:
    needs: build-and-test
    if: ${{ needs.build-and-test.outputs.lint_status == 'success' && needs.build-and-test.outputs.test_status == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Merge dev into master if tests pass
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout master
          git merge --ff-only dev  # Effectue un fast-forward si possible
          git push origin master

  handle-failure:
    needs: build-and-test
    if: ${{ needs.build-and-test.outputs.lint_status != 'success' || needs.build-and-test.outputs.test_status != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Assure l’accès complet à l’historique de la branche
      - name: Create failure branch and reset dev
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          UNIQUE_ID=$(date +'%Y%m%d%H%M%S')
          git branch failures/$UNIQUE_ID dev  # Crée une nouvelle branche de failure
          git reset --hard HEAD~1  # Annule le dernier commit de dev
          git push origin failures/$UNIQUE_ID  # Pousse la branche de failure
          git push origin dev --force  # Forcer la mise à jour de dev après avoir enlevé le commit fautif
