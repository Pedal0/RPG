name: Python CI/CD Pipeline

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: write  # Nécessaire pour faire des pushs et des reset

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        id: lint
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true  # Permet au workflow de continuer même en cas d'erreur de linting
      - name: Set lint status
        run: echo "LINT_STATUS=$?" >> $GITHUB_ENV  # Stocke le statut de flake8 (0 = succès, 1 = échec)

      - name: Test with pytest
        id: test
        run: pytest
        continue-on-error: true  # Permet au workflow de continuer même en cas d'échec des tests
      - name: Set test status
        run: echo "TEST_STATUS=$?" >> $GITHUB_ENV  # Stocke le statut de pytest (0 = succès, 1 = échec)

  fast-forward-master:
    needs: build-and-test
    if: env.LINT_STATUS == '0' && env.TEST_STATUS == '0'  # Ne se déclenche que si flake8 et pytest réussissent
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Fast-forward master
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout master
          git merge --ff-only dev
          git push origin master

  handle-failure:
    needs: build-and-test
    if: env.LINT_STATUS != '0' || env.TEST_STATUS != '0'  # Se déclenche si flake8 ou pytest échoue
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove failed commit from dev and create failure branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          UNIQUE_ID=$(date +'%Y%m%d%H%M%S')
          git branch failures/$UNIQUE_ID dev
          git reset --hard HEAD~1
          git push origin failures/$UNIQUE_ID
          git push origin dev --force
